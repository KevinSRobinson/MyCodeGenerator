<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>

<#+ 
    


    
   
    

void GenerateUnitOfWork(string path, List<CodeClass> codeClasses){#>
using System;
using Data;

public interface IUnitOfWork : IDisposable
{
   
    <#+
        foreach(CodeClass codeClass in codeClasses)
        {
            WriteLine(GetInterfacePropertyName(codeClass.Name, "Repository", true) + GetPropertyGetterSetters(true, false));
        }
	#>

	void Save();
}


public class UnitOfWork : IUnitOfWork
{
    private <#= efContext #> _context;

    public UnitOfWork(<#= efContext #> context)
    {
        _context = context;
    }

	//Delete this default constructor if using an IoC container
	public UnitOfWork()
	{
		_context = new <#= efContext #>();
	}
	
   
    <#+
        


    foreach(CodeClass codeClass in codeClasses)
    {
          
    #>

	public <#= GetInterfacePropertyName(codeClass.Name, "Repository", true)#>
    {
        get { return new <#= codeClass.Name + "Repository" #>(_context); }
    }
	<#+
		}
	#>

    public void Save()
    {
        _context.SaveChanges();
    }

    public void Dispose()
    {
        Dispose(true);
        GC.SuppressFinalize(this);
    }

    protected virtual void Dispose(bool disposing)
    {
        if (disposing)
        {
            if (_context != null)
            {
                _context.Dispose();
                _context = null;
            }
        }
    }
}
<#+
	  CreateDirectoryFullPath(path);
	  CreateFile(path + "UnitofWork.cs");
	}	
#>