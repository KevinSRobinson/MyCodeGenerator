
<#+    void GenerateRespositories(string repositoriesPath, CodeClass c){

        var dtoName = GetDtoCamelcaseClassName(c);
        var dtoType = GetDtoClassName(c);
        var className = c.Name;
        var classType = GetCamelcaseClassName(c);
#>
using System;
using System.Collections.Generic;
using System.Linq;
using Data;

public class <#=className#>Repository : Repository<<#=className#>>, I<#=className#>Repository
{
    private <#=        efContext #> _context;

    public <#=className#>Repository(<#=        efContext#> context) : base(context)
    {
        _context = context;
    }

    	<#+foreach (CodeElement meb in c.Members) {
					if (meb.Name == "UserId") { #>
						   public IEnumerable<<#=className#>> GetByUserId(Guid userId)
                            {
                                 return _context.<#=className#>s.Where(x => x.UserId == userId);
                            }
						<#+};			
					};
        #> 

 
  
}


public interface I<#=className#>Repository : IRepository<<#=className#>>
{
    
    	<#+foreach (CodeElement meb in c.Members) {
					if (meb.Name == "UserId") { #>
						   IEnumerable<<#=className#>> GetByUserId(Guid userId);
						<#+};			
					};
        #> 
    
}

<#+
 CreateDirectoryFullPath(repositoriesPath);
	  CreateFile(repositoriesPath + className + "Repository.cs");
	}	
#>