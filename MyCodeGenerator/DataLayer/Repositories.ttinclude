
<#+    

    
void GenerateRespositories(string repositoriesPath, CodeClass c){

        var helper = new CodeClassHelper(c);

#>
using System;
using System.Collections.Generic;
using System.Linq;
using Data;

public class <#=helper.Name#>Repository : Repository<<#=helper.Name#>>, I<#=helper.Name#>Repository
{
    private <#=        efContext #> _context;

    public <#=helper.Name#>Repository(<#=        efContext#> context) : base(context)
    {
        _context = context;
    }

    <#+foreach (CodeElement meb in c.Members) {
		if (meb.Name == "UserId") { #>
				public IEnumerable<<#=helper.Name#>> GetByUserId(Guid userId)
                {
                        return _context.<#=helper.Name#>s.Where(x => x.UserId == userId);
                }
			<#+};			
		};
    #> 

 
  
}


public interface I<#=helper.Name#>Repository : IRepository<<#=helper.Name#>>
{
    
<#+foreach (CodeElement meb in c.Members) {
	if (meb.Name == "UserId") { #>
			IEnumerable<<#=helper.Name#>> GetByUserId(Guid userId);
		<#+};			
	};
#> 
    
}

<#+
 CreateDirectoryFullPath(repositoriesPath);
	  CreateFile(repositoriesPath + helper.Name + "Repository.cs");
	}	
#>