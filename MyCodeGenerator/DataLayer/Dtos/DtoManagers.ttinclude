
<#+ 
void GenerateDtoRepos(string dotReposPath, CodeClass c) {		



var dtoName = GetDtoCamelcaseClassName(c);
var dtoType = GetDtoClassName(c);
var className = GetCamelcaseClassName(c);
var classType = c.Name;
#>



using System;
using System.Collections.Generic;
using System.Linq;
using Data;
using Dtos;
namespace Dto.DtoRepos
{
    public interface I<#=dtoType#>Repo
    {
        IEnumerable<<#=dtoType#>> GetAll<#=className#>s();
        IEnumerable<<#=dtoType#>> GetUser<#=className#>s(Guid id);
        <#=dtoType#> Add<#=className#>(<#=dtoType#> <#=dtoName#>, Guid userId);
        void Modify<#=className#>(<#=dtoType#> <#=dtoName#>);
        <#=dtoType#> Get<#=className#>(int id);
    }

    public class <#=dtoType#>Repo : I<#=dtoType#>Repo
    {
        private readonly IUnitOfWork _unitOfWork;


        public <#=dtoType#>Repo()
        {
            _unitOfWork = new UnitOfWork();
        }

        public <#=dtoType#>Repo(IUnitOfWork unitOfWork)
        {
            _unitOfWork = unitOfWork;
        }


        #region Mappers
        private void Map<#=classType#>(ref <#=classType#> <#=classType#>, ref <#=dtoType#> <#=dtoName#>)
        {
           	<#+ 
				   foreach (CodeElement meb in c.Members) {
					if (meb.Kind == vsCMElement.vsCMElementProperty) {
						var prop = meb as CodeProperty;
							var type = prop.Type.AsString;
							WriteLine(classType + "." + meb.Name + " = " + dtoName + "." + meb.Name + ";");						
						};			
					};#>   
        }

        private void Map<#=className#>(ref <#=dtoType#> <#=dtoName#>, ref <#=classType#> <#=className#>)
        {
          	<#+ foreach (CodeElement meb in c.Members) {
					if (meb.Kind == vsCMElement.vsCMElementProperty) {
						var prop = meb as CodeProperty;
							var type = prop.Type.AsString;
							WriteLine(dtoName + "." + meb.Name + " = " + dtoName + "." + meb.Name + ";");						
						};			
					};
            #>          

        }

        #endregion 
        


      #region Public Methods


            public <#=dtoType#> Get<#=className#>(int id)
            {
                try
                {
                    var <#=classType#> = _unitOfWork.<#=className#>s.GetById(id);
                    var <#=dtoName#> = new <#=dtoType#>();
                    Map<#=className#>(ref <#=dtoName#>, ref <#=classType#>);

                    return <#=dtoName#>;
                }
                catch (Exception ex)
                {
                    throw new Exception("Failed to Build Modify <#=dtoType#> ", ex);
                }
            }


            public IEnumerable<<#=dtoType#>> GetAll<#=classType#>s()
            {
                try
                {
                   var <#=classType#>s = _unitOfWork.<#=className#>s.GetAll();
                   var results =  <#=classType#>s.Select(x => new <#=dtoType#>()
                    {
					    <#+ 
				        foreach (CodeElement meb in c.Members) {
					    if (meb.Kind == vsCMElement.vsCMElementProperty) {
						    var prop = meb as CodeProperty;
							    WriteLine(meb.Name  + " = x." + meb.Name + ",");						
						    };			
					    };#>
                    });
                    return results;
                }
                catch (Exception ex)
                {
                    throw new Exception("Failed to Build Add<#=dtoType#> Dto", ex);
                }
            }
     

      #endregion 


    
}
}		
		
<#+
	CreateDirectoryFullPath(dotReposPath);  
	CreateFile(dotReposPath  + classType + "DtoManager.cs");
    }
#>

