
<#+ 


    public void WriteSelectMembers(CodeClass codeClass){
		foreach (CodeElement meb in codeClass.Members) {
		if (meb.Kind == vsCMElement.vsCMElementProperty) {
			var prop = meb as CodeProperty;
				WriteLine(meb.Name  + " = x." + meb.Name + ",");						
			};			
		};                        
    }

    void GenerateDtoRepos(string dotReposPath, CodeClass c) {		

    var helper = new CodeClassHelper(c);


#>



using System;
using System.Collections.Generic;
using System.Linq;
using Data;
using Dtos;
namespace Dto.DtoRepos
{
    public interface I<#=helper.DtoName#>Repo
    {
        <#=helper.DtoName#> GetById(int id);
        IEnumerable<<#=helper.DtoName#>> GetAll();        
    }

    public class <#=helper.DtoName#>Repo : I<#=helper.DtoName#>Repo
    {
        private readonly IUnitOfWork _unitOfWork;


        public <#=helper.DtoName#>Repo()
        {
            _unitOfWork = new UnitOfWork();
        }

        public <#=helper.DtoName#>Repo(IUnitOfWork unitOfWork)
        {
            _unitOfWork = unitOfWork;
        }

      
        


      #region Public Methods


            public <#=helper.DtoName#> GetById(int id)
            {
                try
                {
                    var <#=helper.Name#> = _unitOfWork.<#=helper.Name#>s.GetById(id);
                    var <#=helper.DtoName#> = new <#=helper.DtoName#>();
                  
                    return <#=helper.DtoName#>;
                }
                catch (Exception ex)
                {
                    throw new Exception("Failed to Build Modify <#=helper.DtoName#> ", ex);
                }
            }


            public IEnumerable<<#=helper.DtoName#>> GetAll()
            {
                try
                {
                   var <#=helper.Name#>s = _unitOfWork.<#=helper.Name#>s.GetAll();
                   var results =  <#=helper.Name#>s.Select(x => new <#=helper.DtoName#>()
                    {
					    <#+ 
                            WriteSelectMembers(c);
                        #>          
                    });
                    return results;
                }
                catch (Exception ex)
                {
                    throw new Exception("Failed to Build Add<#=helper.DtoName#> Dto", ex);
                }
            }
     
            
      #endregion 


    
}
}		
		
<#+
	CreateDirectoryFullPath(dotReposPath);  
	CreateFile(dotReposPath  + helper.DtoName + "Repo.cs");
    }
#>

