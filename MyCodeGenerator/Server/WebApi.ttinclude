<#+ 
/////////////////////////////////////////////////
    // This Template Generates the Api Controller

    void GenerateWebApis(string webapiPath, CodeClass c){			

        var dtoName = GetDtoCamelcaseClassName(c);
        var dtoType = GetDtoClassName(c);
        var className = c.Name;
        var classType = GetCamelcaseClassName(c);

		#>
		
		using System;
using System.Collections.Generic;
using System.Linq;
using System.Web.Http;
using System.Web.Http.Cors;
using System.Web.Http.Results;
using Data;
using dtoNames;

namespace Api
{
    [EnableCors("*", "*", "*")]
    public class <#=className#>sApiController : ApiBase
    {
        private readonly UnitOfWork _unitOfWork;

		#region "constructors"
			 public <#=className#>sApiController() 
			{
				_unitOfWork = new UnitOfWork();
			}

			public <#=className#>sApiController(UnitOfWork unitOfWork)
			{
				_unitOfWork = unitOfWork;
			}
		#endregion
       
	    private void Map<#=className#>(ref <#=className#> <#=classType#>, ref <#=dtoType#> <#=dtoName#>)
        {
         
	<#+ 
             
				   foreach (CodeElement meb in c.Members) {
					if (meb.Kind == vsCMElement.vsCMElementProperty) {
						var prop = meb as CodeProperty;
							WriteLine(meb.Name);						
						};			
					};#>   
    
        }


	   [Route("api/GetAll<#=className#>s")]
		  public IHttpActionResult GetAll<#=className#>s()
        {
            try
            {
               var  <#=classType#>s = _unitOfWork.<#=className#>s.GetAll();
               var results =  <#=classType#>s.Select(x => new <#=className#>dtoName()
                {
					<#+ 
				   foreach (CodeElement meb in c.Members) {
					if (meb.Kind == vsCMElement.vsCMElementProperty) {
						var prop = meb as CodeProperty;
							var type = prop.Type.AsString;
							WriteLine(meb.Name  + " = x." + meb.Name + ",");						
						};			
					};#>
                });
                   
                return Ok(results);
            }
            catch (Exception ex)
            {
                return new ExceptionResult(ex, this);
            }

        }

		[HttpPost]
		[Route("api/Add<#=className#>")]
		public IHttpActionResult Add<#=className#>(<#=dtoType#> <#=dtoName#>)
        {
            try
            {
                var <#=classType#> = new <#=className#> ();

				Map<#=className#>(ref  <#=classType#> , ref <#=dtoName#>);
				 

                _unitOfWork.<#=className#>s.Add(<#=classType#>);
                _unitOfWork.Save();

                <#=dtoName#>.Id = <#=classType#>.Id;
                return Ok(<#=dtoName#>);
            }
            catch (Exception ex)
            {
                return new ExceptionResult(ex, this);
            }
        }

		[HttpPost]
		[Route("api/Modify<#=className#>")]
        public IHttpActionResult Modify<#=className#>(<#=dtoType#> <#=dtoName#>)
        {
            try
            {
                var <#=classType#>= _unitOfWork.<#=className#>s.GetById(<#=dtoName#>.Id);
                 Map<#=className#>(ref <#=classType#>, ref <#=dtoName#>);

				<#+ 
				   foreach (CodeElement meb in c.Members) {
					if (meb.Kind == vsCMElement.vsCMElementProperty) {
							var prop = meb as CodeProperty;
							var type = prop.Type.AsString;
							
							WriteLine(classType + "." + meb.Name + " = " + dtoName + "." + meb.Name + ";");						
						};			
					};#>
					
                _unitOfWork.Save();
                
                return Ok(<#=dtoName#>);
            }
            catch (Exception ex)
            {
                return new ExceptionResult(ex, this);
            }
        }

        
		[Route("api/Get<#=className#>s/{id}")]
        public IHttpActionResult Get<#=className#>(int id)
        {
            var <#=classType#> = _unitOfWork.<#=className#>s.GetById(id);

            var <#=dtoName#> = new <#=className#>dtoName()
            {

				<#+ 
               foreach (CodeElement meb in c.Members) {
				if (meb.Kind == vsCMElement.vsCMElementProperty) {
					var prop = meb as CodeProperty;
						var type = prop.Type.AsString;
						WriteLine(meb.Name + "=" + classType + "." + meb.Name + ",");						
					};			
				};#>
            };

            return Ok(<#=dtoName#>);
        }
    }
}
	
		
		<#+

	 CreateDirectoryFullPath(webapiPath);
	CreateFile(webapiPath + className + "ApiController.cs");
    }
#>

