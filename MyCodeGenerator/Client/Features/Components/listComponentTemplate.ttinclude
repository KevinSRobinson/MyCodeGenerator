
<#+ 
    //Build the Table <TD> string
    string GetTableTD(string className, string memberName, string angularSuffix )
    {
        return string.Format("<td>{0}.{1} | {2} }}</td>", className, memberName, angularSuffix);         
    }


    void WriteTableCells(CodeClass c){
        var helper = new CodeClassHelper(c);

        //Loop Members
        foreach (CodeElement meb in c.Members) {

            //If is a Property
			if (meb.Kind == vsCMElement.vsCMElementProperty) {


                    
			        var prop = meb as CodeProperty;

                    //Get the property Type
				    var type = prop.Type.AsString;

				    if(type == "string") {
                        WriteLine(GetTableTD(helper.Name, meb.Name, ""));
				    }
				    else if(type == ("System.DateTime?") |  type == ("System.DateTime")){
                        WriteLine(GetTableTD(helper.Name, meb.Name, " date:'medium'"));					    
				    }
				    else if(type == ("int")){
					      WriteLine(GetTableTD(helper.Name, meb.Name, ""));
				    }
				    else if(type == ("decimal")){
                        WriteLine(GetTableTD(helper.Name, meb.Name, " number:2 "));					    
				    }
				    else {
					    WriteLine("<th>" + type + "</th>");
				    }
			    };			

	        };
}

  void GenerateListComponentTemplate(CodeClass codeClass){	
		
         var helper = new CodeClassHelper(codeClass);
#>
		
		    <my-panel title="Tags" show-add-button="true"
              add="vm.create()"
              style="success" icon="tags" icon-size="2">

<table>

<#+        WriteTableCells(codeClass);#>

</table>


        <my-filter-textbox  ng-model="filter"></my-filter-textbox>


<#+
    
    var path= GetFeaturePath( helper.Name ) + "/Components/" +  helper.Name + "List/";
  
	CreateDirectoryFullPath(path);
	CreateFile(path + helper.CamelCase + "ListTemplate.html");
}	
#>

