
<#+ 
    //Build the Table <TD> string
    string GetTableTD(string className, string property, string angularSuffix )
    {

        var td = String.Format("<td>{0} {1}.{2} ", "{{", className.ToLower(), GetCamelcaseClassName(property));

        if(angularSuffix!= "")
        {
            td += String.Format(" | {0} ", angularSuffix);         
        }
        
        td += "}}</td>";

        return td;
    }


    void WriteTableHeaders(CodeClass c){
        var helper = new CodeClassHelper(c);

        //Loop Members
        foreach (CodeElement meb in c.Members) {

            //If is a Property
            if (meb.Kind == vsCMElement.vsCMElementProperty) {
                WriteLine("<td>" +  meb.Name + "</td>");                 
             };
        }
    }

    void WriteTableCells(CodeClass c){
        var helper = new CodeClassHelper(c);

        //Loop Members
        foreach (CodeElement meb in c.Members) {

            //If is a Property
			if (meb.Kind == vsCMElement.vsCMElementProperty) {


                    var prop = meb as CodeProperty;  

                    //Get the property Type
				    var type = prop.Type.AsString;

                    switch(type){
                       case "string":
                            WriteLine(GetTableTD(helper.CamelCase, meb.Name, ""));
                            break;
				        case ("System.DateTime?"):
                            WriteLine(GetTableTD(helper.CamelCase, meb.Name, " date:'medium'"));					    
                            break;
                        case ("System.DateTime"):
                            WriteLine(GetTableTD(helper.CamelCase, meb.Name, " date:'medium'"));					    
                            break;
				        case("int"):
					          WriteLine(GetTableTD(helper.CamelCase, meb.Name, ""));
                            break;
				        case "decimal":
                            WriteLine(GetTableTD(helper.CamelCase, meb.Name, " number:2 "));					    
                            break;
                        case "System.Guid":
                           				    
                            break;
				        default:
					        WriteLine("<td>" + type + "</td>");
                            break;
				        }
			        };			

	        };
    }

 void GenerateListComponentTemplate(CodeClass codeClass){	
		
         var helper = new CodeClassHelper(codeClass);
#>
		
<my-panel title="Tags" show-add-button="true" add="vm.create()" style="success" icon="tags" icon-size="2">
 <my-filter-textbox  ng-model="filter"></my-filter-textbox>
<table>

    <thead>
        <tr>
             <#+WriteTableHeaders(codeClass);#>
        </tr>
    </thead>

    <tr  ng-repeat='<#= helper.CamelCase #> in vm.<#= helper.CamelCasePlural #> '>
        <#+WriteTableCells(codeClass);#>
    </tr>
</table>


       


<#+
    
   CreateDirectoryFullPath(clientAppPath + helper.AngularClient.ListComponentFilePath);
CreateFile(clientAppPath + helper.AngularClient.ListComponentFilePath + helper.AngularClient.ListComponentTemplateFileName);
}	
#>

